[
  {
    "NL": "Find the total revenue generated by campaigns that were successful, defined as campaigns with an actual spent less than the budget.",
    "Query": "Here is the SQL statement that corresponds to the NL query:\n\n```sql\nSELECT SUM(revenue) \nFROM campaigns \nWHERE actual_spent < budget;\n```\n\nThis SQL statement will return the total revenue generated by campaigns where the actual spent amount is less than the budget."
  },
  {
    "NL": "List the product display names and their associated supplier reference IDs for all products that are currently active.",
    "Query": "Here is the SQL statement that corresponds to the NL query:\n\n```sql\nSELECT product_display_name, supplier_reference_id\nFROM products\nWHERE active = 1;\n```\n\nHere's a breakdown of the SQL statement:\n\n* `SELECT product_display_name, supplier_reference_id`: This line specifies the columns that we want to retrieve from the database. In this case, we want to retrieve the `product_display_name` and `supplier_reference_id` columns.\n* `FROM products`: This line specifies the table from which we want to retrieve the data. In this case, we want to retrieve data from the `products` table.\n* `WHERE active = 1`: This line specifies the condition under which we want to retrieve the data. In this case, we want to retrieve only the rows where the `active` column is equal to 1, which means that the product is currently active.\n\nNote that the exact syntax may vary depending on the specific database management system you are using (e.g. MySQL, PostgreSQL, SQL Server, etc.)."
  },
  {
    "NL": "Retrieve the campaign name, start date, and end date for all email campaigns that have an open rate greater than 20%.",
    "Query": "Here is the SQL statement that corresponds to the NL query:\n\n```sql\nSELECT campaign_name, start_date, end_date\nFROM email_campaigns\nWHERE open_rate > 0.20;\n```\n\nHere's a breakdown of the SQL statement:\n\n* `SELECT campaign_name, start_date, end_date`: This clause specifies the columns that we want to retrieve from the `email_campaigns` table. In this case, we want to retrieve the `campaign_name`, `start_date`, and `end_date` columns.\n* `FROM email_campaigns`: This clause specifies the table from which we want to retrieve the data. In this case, we want to retrieve data from the `email_campaigns` table.\n* `WHERE open_rate > 0.20`: This clause specifies the condition that we want to apply to the data. In this case, we want to retrieve only the rows where the `open_rate` is greater than 20%. The `open_rate` is likely a decimal value, so we use the `>` operator to compare it to 0.20.\n\nNote that the `open_rate` column is assumed to be a decimal or float data type, and the value 0.20 is used to represent 20%. If the `open_rate` column is stored as a percentage (e.g., as an integer value with a percentage sign), you may need to modify the SQL statement accordingly."
  },
  {
    "NL": "Find all female customers above 40 years old with more than 1000 loyalty points.",
    "Query": "Here is the SQL statement that corresponds to the NL query:\n\n```sql\nSELECT *\nFROM customers\nWHERE gender = 'F' AND age > 40 AND loyalty_points > 1000;\n```\n\nHere's a breakdown of the SQL statement:\n\n* `SELECT *`: This selects all columns (`*`) from the `customers` table.\n* `FROM customers`: This specifies the table to select from, which is `customers`.\n* `WHERE gender = 'F'`: This filters the results to only include rows where the `gender` column is equal to `'F'`, which represents female customers.\n* `AND age > 40`: This filters the results to only include rows where the `age` column is greater than 40.\n* `AND loyalty_points > 1000`: This filters the results to only include rows where the `loyalty_points` column is greater than 1000.\n\nNote that the exact column names and data types may vary depending on the specific database schema and table structure."
  }
]
